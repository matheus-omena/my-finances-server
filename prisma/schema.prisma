// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// To generate migrations: npx prisma migrate dev

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String
  password  String
  createdAt DateTime @default(now())

  Responsible     Responsible[]
  ExpenseCategory ExpenseCategory[]
  ExpenseGroup    ExpenseGroup[]
  FixedExpense    FixedExpense[]
  MonthlyExpense  MonthlyExpense[]
  @@map("users")
}

model Responsible {
  id        String   @id @default(uuid())
  name      String
  color     String?
  createdAt DateTime @default(now())
  createdBy String   @unique
  user      User     @relation(fields: [createdBy], references: [id])

  fixedExpense   FixedExpense?
  monthlyExpende MonthlyExpense?

  @@map("responsibles")
}

model ExpenseCategory {
  id        String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now())
  createdBy String   @unique
  user      User     @relation(fields: [createdBy], references: [id])

  expenseGroup ExpenseGroup?

  @@map("expensecategories")
}

model ExpenseGroup {
  id          String    @id @default(uuid())
  name        String
  color       String
  type        Int
  paymentDate DateTime?
  createdAt   DateTime  @default(now())

  createdBy String @unique
  user      User   @relation(fields: [createdBy], references: [id])

  categoryId String          @unique
  category   ExpenseCategory @relation(fields: [categoryId], references: [id])

  fixedExpense   FixedExpense?
  monthlyExpende MonthlyExpense?

  @@map("expensegroups")
}

model FixedExpense {
  id                 String   @id @default(uuid())
  name               String
  value              Decimal
  paymentDay         Int
  totalInstallments  Int?
  currentInstallment Int?
  lastMonthProcessed Int
  createdAt          DateTime @default(now())

  createdBy String @unique
  user      User   @relation(fields: [createdBy], references: [id])

  responsibleId String       @unique
  responsible   Responsible  @relation(fields: [responsibleId], references: [id])
  groupId       String       @unique
  group         ExpenseGroup @relation(fields: [groupId], references: [id])

  monthlyExpense MonthlyExpense?

  @@map("fixedexpenses")
}

model MonthlyExpense {
  id                 String  @id @default(uuid())
  name               String
  value              Decimal  
  paymentDay         Int
  paymentMonth       Int
  totalInstallments  Int?
  currentInstallment Int?
  isPaid             Boolean
  dateItWasPaid      DateTime?

  createdAt DateTime @default(now())
  createdBy String   @unique
  user      User     @relation(fields: [createdBy], references: [id])

  responsibleId  String        @unique
  responsible    Responsible   @relation(fields: [responsibleId], references: [id])
  groupId        String        @unique
  group          ExpenseGroup  @relation(fields: [groupId], references: [id])
  fixedExpenseId String?       @unique
  fixedExpense   FixedExpense? @relation(fields: [fixedExpenseId], references: [id])

  @@map("monthlyexpenses")
}
